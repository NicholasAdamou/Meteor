package Meteor.System.Asset.Type.Audios;

import javax.sound.sampled.Clip;

import Meteor.System.Util;
import Meteor.System.Error;
import Meteor.System.Asset.AssetManager;

/**
 * {@code AudioPlayer} is a audio manager class.
 * <br>
 * This class can be used to play audio files.
 */
public class AudioPlayer
{
    private static final String CLASS_NAME = "AudioPlayer"; //The name of the class for use in error reporting
    private static boolean muteAudio = false; //The main boolean variable to turn on or off the audio

    /**
     * Method used to grab a audio file contained inside the REGISTRAR.
     *
     * @param name  The name attached to the audio file.
     * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
     * @return The audio file from the REGISTRAR.
     */
    public static Clip get(String name, boolean isKey)
    {
        String key;
        if (!isKey) key = AssetManager.createKey(Audio.TYPE, name);
        else key = name;
        Clip clip = null;
        if (AssetManager.containsKey(key)) clip = AssetManager.getAudio(key);
        if (clip == null) new Error("Something went wrong during the retrieval of the asset, [" + key + "].");
        return clip;
    }

    /**
     * Method used to play a given audio file based on an inputted string value.
     *
     * @param name  The name attached to the audio file.
     * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
     */
    public static void play(String name, boolean isKey)
    {
        if (muteAudio) return;
        Clip clip = AudioPlayer.get(name, isKey);
        if (clip == null) return;
        int gap = 0;
        Util.log("[" + CLASS_NAME + "]: Playing [" + name + "].");
        play(clip, gap);
    }

    /**
     * Method used to play a clip file based on an inputted "gap" value.
     *
     * @param clip The audio file.
     * @param gap  The "gap" value.
     */
    private static void play(Clip clip, int gap)
    {
        if (clip == null) return;
        if (clip.isRunning()) clip.stop();
        clip.setFramePosition(gap);
        while (!clip.isRunning())
            clip.start();
    }

    /**
     * Method used to stop playing a given audio file based on an inputted string value.
     *
     * @param name  The name attached to the audio file.
     * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
     */
    private static void stop(String name, boolean isKey)
    {
        Clip clip = AudioPlayer.get(name, isKey);
        if (clip == null) return;
        Util.log("[" + CLASS_NAME + "]: Stopping [" + name + "].");
        if (clip.isRunning()) clip.stop();
    }

    /**
     * Method used to resume playing a given audio file based on an inputted string value.
     *
     * @param name  The name attached to the audio file.
     * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
     */
    public static void resume(String name, boolean isKey)
    {
        if (muteAudio) return;
        Clip clip = AudioPlayer.get(name, isKey);
        if (clip == null) return;
        if (clip.isRunning()) return;
        Util.log("[" + CLASS_NAME + "]: Starting [" + name + "].");
        clip.start();
    }

    /**
     * Method used to loop a given audio file based on an inputted string value.
     *
     * @param name  The name attached to the audio file.
     * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
     */
    public static void loop(String name, boolean isKey)
    {
        Clip clip = AudioPlayer.get(name, isKey);
        String key;
        if (isKey)
        {
            key = name;
            stop(key, true);
        } else
        {
            stop(name, false);
        }
        if (muteAudio) return;
        if (clip == null) return;
        Util.log("[" + CLASS_NAME + "]: Looping [" + name + "].");
        clip.loop(Clip.LOOP_CONTINUOUSLY);
    }

    /**
     * Method used to return the given audio file's length based on an inputted string value.
     *
     * @param key The key attached to the audio file.
     * @return The length of the audio file.
     */
    public static int getAudioFrames(String key)
    {
        return get(key, true).getFrameLength();
    }
}