package Meteor.System.Asset.Type.Fonts;

import java.util.HashMap;
import java.util.Map;

import Meteor.Graphics.Sprites.Spritesheet;
import Meteor.System.Error;
import Meteor.System.Util;
import Meteor.System.Asset.AssetManager;

/**
 * {@code FontManager} is an font manager class.
 * <br>
 * This class can be used to grab and use images.
 */
public class FontManager
{
    public static String CLASS_NAME = "fontManager"; //The title of the class
    public static String MAP_NAME = "fontMap"; //The title of the hash map
    private static String className = "[" + FontManager.CLASS_NAME + "]:"; //The class name formatted

    public static Map<String, Spritesheet> FONT_MAP = new HashMap<>(); //The {@code HashMap<>()} used to hold the images

    /**
     * Determines if a font with a given key exists in the hash table.
     *
     * @param key The lower-cased key attached to the font.
     * @return If the font with a given key exists in the hash table.
     */
    private static boolean checkMap(String key)
    {
        return FONT_MAP.containsKey(key.toLowerCase());
    }

    /**
     * Method used to add a font to the hash table.
     *
     * @param key     The lower-cased key attached to the font.
     * @param bmpFont The font to add to the hash table.
     */
    public static void add(String key, Spritesheet bmpFont)
    {
        FontManager.FONT_MAP.put(key, bmpFont);
        Util.logAdd(FontManager.CLASS_NAME, key, FontManager.MAP_NAME);
    }

    /**
     * Method used to grab a font contained inside the hash table.
     *
     * @param name The name attached to the font.
     * @return The font from the hash table.
     */
    public static Spritesheet get(String name)
    {
        String key = AssetManager.createKey(Font.TYPE, name);
        Spritesheet bmpFont = null;
        if (checkMap(key)) bmpFont = FONT_MAP.get(key);
        else new Error(Error.KeyNotFoundException(FontManager.CLASS_NAME, key, FontManager.MAP_NAME));
        return bmpFont;
    }

    /**
     * Method used to remove a font from the hash table.
     *
     * @param name  The name attached to the font.
     * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
     */
    public static void remove(String name, boolean isKey)
    {
        String key;
        if (!isKey) key = AssetManager.createKey(Font.TYPE, name);
        else key = name;
        key = key.toLowerCase();
        if (checkMap(key))
        {
            FONT_MAP.remove(key);
            Util.log(className + "[" + key + "] was removed from the [" + FontManager.MAP_NAME + "].");
        } else new Error(Error.KeyNotFoundException(FontManager.CLASS_NAME, key, FontManager.MAP_NAME));
    }

    /**
     * @return The default font used by the engine.
     */
    public static Spritesheet getDefaultFont()
    {
        return get("$default");
    }

    /**
     * Method used to clean up memory used by
     * certain processes.
     */
    public static void cleanUp()
    {
        FONT_MAP.clear();
    }
}
