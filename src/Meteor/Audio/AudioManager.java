package Meteor.Audio;

import java.util.HashMap;

import javax.sound.sampled.Clip;

import Meteor.System.Util;
import Meteor.System.Error;
import Meteor.System.Asset.AssetManager;
import Meteor.System.Asset.Type.Audio;

/**
 * {@code AudioManager} is a audio manager class.
 * <br>
 * This class can be used to play audio files.
 */
public class AudioManager {
    public static String CLASS_NAME = "audioManager"; //The title of the class
    public static String MAP_NAME = "audioMap"; //The key of the hash map
	private static String className = "[" + AudioManager.CLASS_NAME + "]:"; //The class name formatted

	public static HashMap<String, Clip> AUDIO_MAP = new HashMap<>(); //The {@code HashMap<>()} used to hold the audio file's

	private static boolean muteAudio = false; //The main boolean variable to turn on or off the audio

	/**
	 * Determines if a audio file with a given key exists in the hash table.
	 * 
	 * @param key The lower-cased key attached to the audio file.
	 * @return If the audio file with a given key exists in the hash table.
	 */
	private static boolean checkMap(String key) {
		return AUDIO_MAP.containsKey(key.toLowerCase());
	}
	
	/**
     * Method used to add a audio clip to the hash table.
     * 
     * @param key The lower-cased key attached to the audio clip.
     * @param audio The audio clip to add to the hash table.
     */
    public static void add(String key, Clip audio) {
    	AudioManager.AUDIO_MAP.put(key, audio);
		Util.logAdd(AudioManager.CLASS_NAME, key, AudioManager.MAP_NAME);
    }

	/**
	 * Method used to grab a audio file contained inside the hash table.
	 * 
	 * @param name The name attached to the audio file.
	 * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
	 * @return The audio file from the hash table.
	 */
	public static Clip get(String name, boolean isKey) {
		String key = "";
		if (!isKey) key = AssetManager.createKey(Audio.TYPE, name);
		else key = name;
		Clip clip = null;
		if (checkMap(key)) clip = AUDIO_MAP.get(key);
		else new Error(Error.KeyAlreadyExistsException(AudioManager.CLASS_NAME, key, AudioManager.MAP_NAME));
		if (clip == null) new Error("Something went wrong during the retrevial of the asset, [" + key + "].");
		return clip;
	}

	/**
	 * Method used to remove an audio file from the hash table.
	 * 
	 * @param name The name attached to the audio file.
	 * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
     */
	public static void remove(String name, boolean isKey) {
		String key = "";
		if (!isKey) key = AssetManager.createKey(Audio.TYPE, name);
		else key = name;
		key = key.toLowerCase();
		if (checkMap(key)) {
			flush(key);
			AUDIO_MAP.remove(key);
			Util.log(className + "[" + key + "] was removed from the [" + "Registrar" + "].");
		} else new Error(Error.KeyNotFoundException(AudioManager.CLASS_NAME, key, AudioManager.MAP_NAME));
	}

	/**
	 * Method used to clean up memory used by
	 * certain processes.
	 */
	public static void cleanUp() {
		AUDIO_MAP.clear();
	}

	/**
	 * Method used to clean up memory used by
	 * certain processes.
	 */
	private static void flush(String key) {
		get(key.toLowerCase(), true).flush();
	}

	/**
	 * Method used to play a given audio file based on an inputted string value.
	 * 
	 * @param name The name attached to the audio file.
	 * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
	 */
	public static void play(String name, boolean isKey) {
		if(muteAudio) return;
		Clip clip = AudioManager.get(name, isKey);
		if (clip == null) return;
		int gap = 0;
		Util.log("[" + CLASS_NAME + "]: Playing [" + name + "].");
		play(clip, gap);
	}

	/**
	 * Method used to play a clip file based on an inputted "gap" value.
	 * 
	 * @param clip The audio file.
	 * @param gap The "gap" value.
	 */
	private static void play(Clip clip, int gap) {
		if(clip == null) return;
		if(clip.isRunning()) clip.stop();
		clip.setFramePosition(gap);
		while (!clip.isRunning())
			clip.start();
	}

	/**
	 * Method used to stop playing a given audio file based on an inputted string value.
	 * 
	 * @param name The name attached to the audio file.
	 * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
	 */
	private static void stop(String name, boolean isKey) {
		Clip clip = AudioManager.get(name, isKey);
		if(clip == null) return;
		Util.log("[" + CLASS_NAME + "]: Stopping [" + name + "].");
		if(clip.isRunning()) clip.stop();
	}

	/**
	 * Method used to resume playing a given audio file based on an inputted string value.
	 * 
	 * @param name The name attached to the audio file.
	 * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
	 */
	public static void resume(String name, boolean isKey) {
		if(muteAudio) return;
		Clip clip = AudioManager.get(name, isKey);
		if (clip == null) return;
		if(clip.isRunning()) return;
		Util.log("[" + CLASS_NAME + "]: Starting [" + name + "].");
		clip.start();
	}

	/**
	 * Method used to loop a given audio file based on an inputted string value.
	 * 
	 * @param name The name attached to the audio file.
	 * @param isKey Weather or not the name parameter is the key generated by the {@code AssetManager}.
	 */
	public static void loop(String name, boolean isKey) {
		Clip clip = AudioManager.get(name, isKey);
		String key = "";
		if (isKey) {
			key = name;
			stop(key, true);
		} else {
			stop(name, false);
		}
		if(muteAudio) return;
		if (clip == null) return;
		Util.log("[" + CLASS_NAME + "]: Looping [" + name + "].");
		clip.loop(Clip.LOOP_CONTINUOUSLY);
	}

	/**
	 * Method used to return the given audio file's length based on an inputted string value.
	 * 
	 * @param key The key attached to the audio file.
	 * @return The length of the audio file.
	 */
	public static int getAudioFrames(String key) {
		return AUDIO_MAP.get(key.toLowerCase()).getFrameLength();
	}
}